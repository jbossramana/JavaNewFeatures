The key difference between Anonymous class and Lambda expression is the usage of 'this' keyword. 
In the anonymous classes, "this" keyword resolves to anonymous class itself, whereas for lambda 
expression "this" keyword resolves to enclosing class where lambda expression is written.

---

Another difference between lambda expression and anonymous class is in the way these two are compiled.
Java compiler compiles lambda expressions and convert them into private method of the class. 
It uses invokedynamic instruction that was added in Java 7 to bind this method dynamically.

//Anonymous class
Runnable task1 = new Runnable(){
 
    @Override
    public void run(){
        System.out.println("Task #1 is running");
    }
};
 

 
Thread thread1 = new Thread(task1);
thread1.start();

------

// Lambda Runnable
Runnable task2 = () -> { System.out.println("Task #2 is running"); };
 
// start the thread
new Thread(task2).start();


Thread Creation:
You can use anonymous classes to create and start a new thread:

Thread thread = new Thread(new Runnable() {
    public void run() {
        // Code to be executed in the new thread
    }
});
thread.start();


Event Handling:
Anonymous classes are commonly used in event handling. For example, when you want to
 respond to a button click, you can create an anonymous class that implements the 
 ActionListener interface:
 
 button.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        // Handle button click
    }
});
 
 
 button.addActionListener(e -> {
    // Handle button click
});


Implementing Interfaces:
When working with interfaces, you may want to create a one-time-use implementation without explicitly defining 
a new class. For example, consider the following Comparator:

List<String> names = Arrays.asList("John", "Alice", "Bob");

Collections.sort(names, new Comparator<String>() {
    public int compare(String s1, String s2) {
        return s1.compareTo(s2);
    }
});

Collections.sort(names, (s1, s2) -> s1.compareTo(s2));


In unit testing, you might use anonymous classes to create mock objects or stubs for interfaces or abstract 
classes that are part of the code under test.
 
SomeInterface mock = new SomeInterface() {
    public void someMethod() {
        // Mock implementation
    }
};

 

