JEP 444: Virtual Threads - v21


[ OS Layer ]
  |------------------|
  |   Native Threads  |
  |------------------|
            |
            |
   +-------------------+
   |     JVM Layer     |
   |-------------------|
   |   Virtual Threads  |
   |   (Managed here)  |
   +-------------------+

Overall Structure:

JVM Layer: At the top, represent the Java Virtual Machine (JVM) as a box. This is where both 
virtual and native threads are managed.

Native Threads: Below the JVM, represent the operating system (OS) layer where native 
threads exist. Each native thread can be seen as a line connecting to the OS's thread management.

Virtual Threads: Inside the JVM box, depict virtual threads as lightweight units that can be created 
in large numbers.



What is a Platform Thread?

A platform thread is implemented as a thin wrapper around an operating system (OS) thread. A platform thread 
runs Java code on its underlying OS thread, and the platform thread captures its OS thread for the platform 
thread's entire lifetime. Consequently, the number of available platform threads is limited to the number of 
OS threads.

Platform threads typically have a large thread stack and other resources that are maintained by the operating 
system. They are suitable for running all types of tasks but may be a limited resource.

What is a Virtual Thread?

Like a platform thread, a virtual thread is also an instance of java.lang.Thread. However, a virtual thread 
isn't tied to a specific OS thread. A virtual thread still runs code on an OS thread. However, when code 
running in a virtual thread calls a blocking I/O operation, the Java runtime suspends the virtual thread 
until it can be resumed. The OS thread associated with the suspended virtual thread is now free to perform 
operations for other virtual threads.

Virtual threads are implemented in a similar way to virtual memory. To simulate a lot of memory, an operating 
system maps a large virtual address space to a limited amount of RAM. Similarly, to simulate a lot of threads, 
the Java runtime maps a large number of virtual threads to a small number of OS threads.

The following example creates a virtual thread named MyThread with the Thread.Builder interface:

Thread.Builder builder = Thread.ofVirtual().name("MyThread");
Runnable task = () -> {
    System.out.println("Running thread");
};
Thread t = builder.start(task);
System.out.println("Thread t name: " + t.getName());
t.join();

The following example creates and starts two virtual threads with Thread.Builder:

Thread.Builder builder = Thread.ofVirtual().name("worker-", 0);
Runnable task = () -> {
    System.out.println("Thread ID: " + Thread.currentThread().threadId());
};

// name "worker-0"
Thread t1 = builder.start(task);   
t1.join();
System.out.println(t1.getName() + " terminated");

// name "worker-1"
Thread t2 = builder.start(task);   
t2.join();  
System.out.println(t2.getName() + " terminated");

Creating and Running a Virtual Thread with the Executors.newVirtualThreadPerTaskExecutor() Method

try (ExecutorService myExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
    Future<?> future = myExecutor.submit(() -> System.out.println("Running thread"));
    future.get();
    System.out.println("Task completed");
    // ...