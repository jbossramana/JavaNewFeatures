Java Optional is a container object that may or may not contain a non-null value. It was introduced in 
Java 8 to help handle scenarios where a method may or may not return a result.

Optional in Java provides a variety of methods to work with optional values. Some of the commonly used methods include:

>> ofNullable(T value): Returns an Optional describing the specified value, if non-null, 
otherwise returns an empty Optional.

Optional<String> optional = Optional.ofNullable("Hello");

>> of(T value): Returns an Optional describing the specified non-null value. If the provided 
value is null, it throws a NullPointerException

Optional<String> optional = Optional.of("Hello");

>> isPresent(): Returns true if there is a value present, otherwise returns false.

if (optional.isPresent()) {
    // do something with optional.get()
}

>> ifPresent(Consumer<? super T> consumer): If a value is present, performs the given action 
with the value, otherwise does nothing.

optional.ifPresent(value -> System.out.println("Value: " + value));

>> get(): If a value is present, returns the value, otherwise throws NoSuchElementException.

 String text = null;
Optional<String> optional = Optional.of(text);
String value = optional.get();

>> orElse(T other): Returns the value if present, otherwise returns the specified default value.

String result = optional.orElse("Default Value");

>> orElseGet(Supplier<? extends T> other): Returns the value if present, otherwise returns the 
result of calling the given Supplier.

String result = optional.orElseGet(() -> "Default Value");
 String result2 = optional.orElseGet(() -> getDefaultValue());

>> orElseThrow(Supplier<? extends X> exceptionSupplier): Returns the value if present, otherwise throws an exception produced by the provided supplier.

String result = optional.orElseThrow(() -> new NoSuchElementException("No value present"));

>> filter(Predicate<? super T> predicate): If a value is present and the value matches the given predicate, returns an Optional describing the value, 
otherwise returns an empty Optional.

Optional<String> filteredOptional = optional.filter(value -> value.length() > 5);

>> map(Function<? super T, ? extends U> mapper): If a value is present, applies the given mapping function to it and returns an Optional describing the 
result, otherwise returns an empty Optional.

Optional<Integer> lengthOptional = optional.map(String::length);

These methods provide flexibility in working with Optional and help handle optional values more effectively, reducing the chances of NullPointerExceptions in certain scenarios.