However, note that there were flaws in the way we designed our solution above.

Lets say we have a new shape pentagon next. In that case we will again end up modifying 
AreaCalculator class. As the types of shapes grows this becomes messier as AreaCalculator keeps 
on changing and any consumers of this class will have to keep on updating their libraries which contain 
AreaCalculator. As a result, AreaCalculator class will not be baselined(finalized) with surety as every time 
a new shape comes it will be modified. So, this design is not closed for modification.

Also, note that this design is not extensible, i.e what if complicated shapes keep coming, AreaCalculator 
will need to keep on adding their computation logic in newer methods. We are not really expanding the 
scope of shapes; rather we are simply doing piece-meal(bit-by-bit) solution for every shape that is added.